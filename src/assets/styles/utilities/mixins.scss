// -----------------------------------------------------------------------------
// Mixins styles
// -----------------------------------------------------------------------------

//******************************************************************************
// Media queries mixin
//******************************************************************************

$xsm-breakpoint: 320px;
$sm-breakpoint: 480px;
$md-breakpoint: 768px;
$md-height-breakpoint: 1024px;
$lg-breakpoint: 1000px;
$xl-breakpoint: 1200px;

$screen: 'only screen';
$all-screen: 'all';
$landscape: '#{$screen} and (orientation: landscape)';
$portrait: '#{$screen} and (orientation: portrait)';

// Retina
$retina: (
  '#{$screen} and (-webkit-min-device-pixel-ratio: 2)',
  '#{$screen} and (min--moz-device-pixel-ratio: 2)',
  '#{$screen} and (-o-min-device-pixel-ratio: 2/1)',
  '#{$screen} and (min-device-pixel-ratio: 2)',
  '#{$screen} and (min-resolution: 192dpi)',
  '#{$screen} and (min-resolution: 2dppx)'
);

@mixin retina {
  @media #{$retina} {
    @content
  }
}

// Down
$xsm-down: '#{$screen} and (min-width: #{$xsm-breakpoint})';
$sm-down: '#{$screen} and (max-width: #{$sm-breakpoint})';
$md-down: '#{$screen} and (max-width: #{$md-breakpoint})';
$lg-down: '#{$screen} and (max-width: #{$lg-breakpoint})';
$xl-down: '#{$screen} and (max-width: #{$xl-breakpoint})';

@mixin xsm-down {
  @media #{$xsm-down} {
    @content
  }
}

@mixin sm-down {
  @media #{$sm-down} {
    @content
  }
}

@mixin md-down {
  @media #{$md-down} {
    @content
  }
}

@mixin lg-down {
  @media #{$lg-down} {
    @content
  }
}

@mixin xl-down {
  @media #{$xl-down} {
    @content
  }
}

// Up
$xsm-up: '#{$screen} and (min-width: #{$xsm-breakpoint - 1})';
$sm-up: '#{$screen} and (min-width: #{$sm-breakpoint - 1})';
$md-up: '#{$screen} and (min-width: #{$md-breakpoint - 1})';
$lg-up: '#{$screen} and (min-width: #{$lg-breakpoint - 1})';
$xl-up: '#{$screen} and (min-width: #{$xl-breakpoint - 1})';

@mixin xsm-up {
  @media #{$xsm-up} {
    @content
  }
}

@mixin sm-up {
  @media #{$sm-up} {
    @content
  }
}

@mixin md-up {
  @media #{$md-up} {
    @content
  }
}

@mixin lg-up {
  @media #{$lg-up} {
    @content
  }
}

@mixin xl-up {
  @media #{$xl-up} {
    @content
  }
}

// Portrait

$md-portrait: '#{$portrait} and (min-width: #{$md-breakpoint})';

@mixin md-portrait {
  @media #{$md-portrait} {
    @content
  }
}

// Landscape

$sm-landscape: '#{$landscape} and (min-width: #{$xsm-breakpoint}) and (max-width: #{$md-breakpoint})';
$md-landscape: '#{$landscape} and (min-width: #{$md-breakpoint}) and (max-width: #{$md-height-breakpoint})';

@mixin sm-landscape {
  @media #{$sm-landscape} {
    @content
  }
}

@mixin md-landscape {
  @media #{$md-landscape} {
    @content
  }
}

// Portrait and Landscape
$sm-all-orientation: '#{$all-screen} and (min-width: #{$xsm-breakpoint}) and (max-width: #{736px})';

@mixin sm-all-screen {
  @media #{$sm-all-orientation} {
    @content
  }
}

//retina
@mixin image-2x($image) {
  @media (min--moz-device-pixel-ratio: 1.3),
  (-o-min-device-pixel-ratio: 2.6/2),
  (-webkit-min-device-pixel-ratio: 1.3),
  (min-device-pixel-ratio: 1.3),
  (min-resolution: 1.3dppx) {
    background-image: url($image);
  }
}

@mixin sprite-retina($logo-path) {
  @media (min--moz-device-pixel-ratio: 1.3),
  (-o-min-device-pixel-ratio: 2.6/2),
  (-webkit-min-device-pixel-ratio: 1.3),
  (min-device-pixel-ratio: 1.3),
  (min-resolution: 1.3dppx) {
    @include sprite($logo-path);
  }
}

// Clearfix
%clearfix {
  &::after {
    clear: both;
    content: '';
    display: table;
  }
}

// Typography
$type-scale-large: (
  h1: 3.840rem,
  h2: 2.250rem,
  h3: 1.695rem,
  h4: 1.193rem,
  p: 1rem,
  sm: .875rem,
  xsm: .750rem,
);

$type-scale-medium: (
  h1: 3rem,
  h2: 1.875rem,
  h3: 1.500rem,
  h4: 1.125rem,
  p: 1rem,
  sm: .875rem,
  xsm: .75rem,
);

$type-scale-small: (
  h1: 2.655rem,
  h2: 1.659rem,
  h3: 1.327rem,
  h4: .996rem,
  p: .880rem,
  sm: .788rem,
  xsm: .675rem,
);

$breakpoint-medium: 47.9375rem;
$breakpoint-small: 30rem;

@mixin size($level) {
  font-size: map-get($type-scale-large, $level);

  @media (max-width: $breakpoint-medium) {
    font-size: map-get($type-scale-medium, $level);
  }

  @media (max-width: $breakpoint-small) {
    font-size: map-get($type-scale-small, $level);
  }
}

@mixin font-color() {
  @include breakpoint (max-width $tablet) {
    color: $black;
  }
}

/**
 * Allows you to use retina images at various pixel densities.
 * Examples:
 *
 *   @include retina(/images/mypic.jpg, 2);
 *   @include retina(/images/mypic.jpg, 3, 100px 100px, left top no-repeat transparent);
 *
 * @param  {Value}  $path               The path to the file name minus extension.
 * @param  {Number} $cap:    2          The highest pixel density level images exist for.
 * @param  {Value}  $size:   auto auto  The intended width of the rendered image.
 * @param  {Value}  $extras: null       Any other `background` values to be added.
 */
@mixin retina-js($path, $cap: 2, $size: auto auto, $extras: null) {

  /*
   * Set a counter and get the length of the image path.
   */
  $position: -1;
  $strpath: '#{$path}';
  $length: str-length($strpath);

  /*
   * Loop ver the image path and figure out the
   * position of the dot where the extension begins.
   */
  @for $i from $length through $length - 10 {
    @if $position == -1 {
      $char: str-slice($strpath, $i, $i);
      @if str-index($char, ".") == 1 {
        $position: $i;
      }
    }
  }

  /*
   * If we were able to figure out where the extension is,
   * slice the path into a base and an extension. Use that to
   * calculate urls for different density environments. Set
   * values for different environments.
   */
  @if $position != -1 {
    $ext: str-slice($strpath, $position + 1, $length);
    $base: str-slice($strpath, 1, $position - 1);
    $at1x_path: "#{$base}.#{$ext}";
    $at2x_path: "#{$base}@2x.#{$ext}";

    /*
     * Set a base background for 1x environments.
     */
    background: url("#{$at1x_path}") $extras;
    background-size: $size;

    /*
     * Create an @2x-ish media query.
     */
    @media all {
      background: url("#{$at2x_path}") $extras;
      background-size: $size;
    }

    /*
     * Create media queries for all environments that the user has
     * provided images for.
     */
    @if $cap >= 2 {
      @for $env from 2 through $cap {
        $suffix: "@#{$env}x";
        @media (-webkit-min-device-pixel-ratio: $env),
        (min-resolution: $env * 96dpi) {
          background: url("#{$base}#{$suffix}.#{$ext}") $extras;
          background-size: $size;
        }
      }
    }

    /*
     * If anything went wrong trying to separate the file from its
     * extension, set a background value without doing anything to it.
     */
  } @else {
    background: url("#{$path}") $extras;
    background-size: $size;
  }

}
